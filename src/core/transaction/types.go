// MIT License
//
// Copyright (c) 2024 sphinx-core
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package types

import (
	"math/big"
	"sync"
)

// Outpoint represents a specific transaction output by identifying the transaction ID (TxID)
// and the index of the output within that transaction.
type Outpoint struct {
	TxID  string // The transaction ID that this output belongs to
	Index int    // The index of the output in the transaction (e.g., output 0, output 1)
}

// UTXO (Unspent Transaction Output) represents a transaction output that is not yet spent.
// It contains information about the output, including the value, address, coinbase status, and maturity.
type UTXO struct {
	Outpoint Outpoint // The Outpoint referencing the transaction and output index
	Value    uint64   // The value of the UTXO (in the smallest unit of the currency, like satoshis)
	Address  string   // The address that this UTXO belongs to (usually a public key or address)
	Coinbase bool     // True if the UTXO is a coinbase output (i.e., generated by mining)
	Spent    bool     // True if this UTXO has already been spent in a transaction
	Height   uint64   // The block height at which this UTXO was created, used for coinbase maturity
}

// UTXOSet is a collection of UTXOs that are available for spending.
// It ensures thread safety when accessing or modifying the set of UTXOs using a read-write mutex.
// UTXOSet holds the set of UTXOs and tracks the total supply.
type UTXOSet struct {
	mu          sync.RWMutex       // Mutex for locking UTXO set during updates
	utxos       map[Outpoint]*UTXO // Map to store UTXOs using Outpoint as key
	totalSupply *big.Int           // Tracks the total supply of SPX (in nSPX)
}

// Output represents a transaction output, including its value and the address it belongs to.
type Output struct {
	Value   uint64 // The value of the output in the smallest currency unit (e.g., satoshis)
	Address string // The address that this output belongs to
}

// Note represents the receipt or note of a transaction, with an added MAC (Message Authentication Code)
// to ensure the integrity and authenticity of the transaction data.
type Note struct {
	To        string  `json:"to"`        // Recipient's wallet address (Bob's address)
	From      string  `json:"from"`      // Sender's wallet address (Alice's address)
	Fee       float64 `json:"fee"`       // Transaction fee that will be paid for processing the transaction
	Storage   string  `json:"storage"`   // Information regarding the storage used for the transaction (e.g., metadata or file)
	Timestamp int64   `json:"timestamp"` // Timestamp when the transaction was created (in Unix timestamp format)
	MAC       string  `json:"mac"`       // Message Authentication Code to ensure the integrity and authenticity of the note
	Output    *Output `json:"output"`    // Add this field to represent the transaction output
}

// Contract represents the contract between Alice and Bob for a transaction.
// This structure includes both sender and receiver addresses, the amount of the transaction,
// the fee to be paid, and other metadata such as storage and timestamp.
type Contract struct {
	Sender    string   `json:"sender"`    // The address of the sender (Alice's address)
	Receiver  string   `json:"receiver"`  // The address of the receiver (Bob's address)
	Amount    *big.Int `json:"amount"`    // The amount of currency being transferred, stored as big.Int for precision
	Fee       *big.Int `json:"fee"`       // The fee to be paid for the transaction, stored as big.Int for consistency
	Storage   string   `json:"storage"`   // Metadata or information about the storage used (e.g., storage requirements for the contract)
	Timestamp int64    `json:"timestamp"` // The timestamp (Unix format) when the contract was created
}

// Validator validates the transaction note by checking the sender and receiver addresses.
type Validator struct {
	senderAddress    string // The sender's wallet address to validate
	recipientAddress string // The recipient's wallet address to validate
}
